=====================================
| Chat application with Apache Avro |
=====================================

chat-app is a CLI java application which allows users to communicate with each other using a server-clients architecture.
Using the application, users can chat with one another in public or private chat mode.

Features
-------------------------------------

Client Modes:
    Clients can be in one of three modes: lobby, public or private.
    Public mode is used to chat to all other clients in public mode, whereas private mode is used to chat with one other client in particular.
    Clients in lobby mode can only execute application commands (e.g. join public chat).
    Application commands can be executed in every mode, but each mode has its own collection of available commands.
    
Application Commands:
    Application commands are used to provide the apps functionality to users.
    All input in lobby mode will be treated as a command. To make chatting as smooth as possible, all input in the chat modes is treated as a message for other clients. To use commands in the chat modes, the input has to be prepended by a question mark.
    What follows is a list of all possible commands in the chat modes. Commands in lobby mode do not start with a question mark.
    
    GLOBAL COMMANDS:
        Print this list:                 ?list,  ?l
        Leave the chatroom:              ?leave, ?q

        Get the list of connected users: ?getListOfUsers,   ?glou
        List your requests:              ?listMyRequests,   ?lmr
        Send a request to X:             ?sendRequest X,    ?sr X
        Cancel a request to X:           ?cancelRequest X,  ?cr X
        Decline a request from X:        ?declineRequest X, ?dr X

    PUBLIC CHAT COMMANDS:
        if a private chat request for the client is pending:
            Accept a request from X:         ?acceptRequest X, ?ar X

        if a private chat request has been accepted by another client:
            To start the private chat:       ?joinPrivateChat, ?jpc, ?startPrivateChat, ?spc

    PRIVATE CHAT COMMANDS:
        Go to the the public chatroom:   ?joinPublicChat, ?jpc
        Send a video request:            ?videoRequest,   ?vr, ?sendVideoRequest, ?svr

        if a video request has been accepted:
            Send a video:                    ?sendVideo,    ?sv

        if a video request to the user is pending:
            Accept a video request:          ?acceptVideo,  ?av
            Decline a video request:         ?declineVideo, ?dv    
    
    Commands will print an error message if not connected to the server.
    
    
Communication:
    Communication between computers in chat-app is handled by Apache Avro.

Server:
    clients can register at the server with a unique available username.
        usernames with whitespace in them will have the whitespace removed upon registration.
    keeps a list of connected users and updates this list frequently.
    handles clients going into public chat mode and handles the sending of messages to other clients in public chat mode.
    handles the sending of private chat requests from clients to other clients.
    does NOT send messages between clients in private chat mode, this communication is handled peer-to-peer between the clients.
    when a client leaves the application, appropriate data belonging to that client will be removed from the server.
    
Client:
    automatically registers at the server.
    can enter commands after registration with the server.
    can request a list of other online users.
    can go into public chat mode and send messages to other clients in this mode.
    can send private chat requests to other clients.
    can accept or decline private chat requests from other clients.
    upon acceptation of a private chat request, will go into private chat mode (TODO: if other client is available lbalbalab), whereafer communication happens peer-to-peer between the two clients.
    can still send and receive private chat requests.
    private chat mode possible wth only one other client simultaneously.
    in private chat mode, can start a video streaming session.
    can leave public chat mode, private chat mode and the application gracefully.
    
    to start a private chat session: a sends a request to b, b accepts the request from a, a joins the private chatroom with 'startPrivateChat'
    sending requests to yourself/nonexisting users will display an error message
    users cannot go into private chat mode if nobody accepted their private chat request
    
    lobby:
	    can receive/send/accept/decline private chat requests
	
    public chat:
	    can receive/send/accept/decline private chat requests
	    can switch between public and private chat mode
	    available commands for the user will be updated depending on chat mode and open requests

    private chat:
	    can receive/send private chat requests
	    can switch between public and private chat mode
	    available commands for the user will be updated depending on chat mode and open requests
	
	    video:
		    videos can be selected with a file chooser
		    can stream/receive video
		    can stream and receive video simultaneously
		    video decoding is separated from video sending
    
    
Fault tolerance:
    when the server goes offline/disconnects, all clients will get a message. clients will then automatically try to reconnect to the server. if they do not succeed, the application will terminate. Users who are in private chat mode can finish their session first. After they leave private chat mode, the application will terminate for themm as well.
    when a client in a private chat session disconnects from the other one, a message will be displayed, the private chat session will be stopped, and data belonging to the private chat session in eacht client will be gracefully destroyed. The clients can then choose to go into lobby or public chat mode.
	in lobby/public chat, server disconnects:
		commands are disabled until a new connection is made
		if no new connection was made in a timeperiod, app will exit
		
	in private chat:
		1 of the users disconnects: 
			chat will be gracefully shutdown for the other user
			if video was streaming, video streaming will stop and display windows will be removed 
		
		server disconnects:
			commands are disabled
			users can still finish their chat session
			app will exit after chat session is over, if server could not reconnect 
			
			
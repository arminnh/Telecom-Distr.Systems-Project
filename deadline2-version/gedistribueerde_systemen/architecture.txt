=====================================
| Chat application with Apache Avro |
=====================================

For a list of features of the system, see features.txt.


Architecture
-------------------------------------

Several UML diagrams can be found in the uml-diagrams directory:

*) packages-dependencies.png:
    small overview of all of the packages and their dependencies
    
    
*) client.png:
    AppClientInterface:
        An interface generated by Apache Avro using the appClient.avpr file.
        It defines the set of functions which will be available for remote method invocation from other computers over a network.  
    AppClient:
        The main method in this class is what end users (clients) will execute.
        It does everything that is specified for clients in the assignment. 
    
    
*) server.png:
    AppServerInterface:
        An interface generated by Apache Avro using the appServer.avpr file.
        It defines the set of functions which will be available for remote method invocation from other computers over a network.
    AppServer:
        The server in the chat app system. It does everything that is specified for server in the assignment. 
    Request:
        represents private chat requests from clients to other clients
    RequestStatus:
        represents the status of a request: pending/accepted
    ClientInfo:
        holds information about a certain client and a proxy object to that client
    ClientStatus:
        represents the mode of a client: lobby/public/private
        
    We remark here that putting ClientInfo and ClientStatus in the client package would make more sense than in server, but we could not 
    make this work with apache avro's import system.
        
    
*) video.png:
    VideoFileChooser:
        A simple file chooser which filters on supported video files, using javax.swing.
    VideoDecoder:
        This class uses the xuggler library to decode videos. It will decode the video and save each of its frame in a LinkedBlockingQueue of BufferedImages.
    VideoSender:
        VideoSender will take the frames decoded by VideoDecoder at the correct frame rate, draw the frame, and send the frame to the other client.
    
    
*) errorwriter.png:
    ErrorWriter:
        A simple class that prints out specific error messages.
    
    
*) rsvp.png:
    RSVP:
        This class is used for the integration part of the assignment, it can invoke handler calls on a running Click script.
        It takes the IP address and port on which the click script is running as arguments in its constructor, 
        then it can invoke handler calls on the "host1/rsvp" or "host2/rsvp" element, depending on which one is available.
        
    
*) system-dependencies.png:
    This image shows the system (without the client and server interfaces) and their dependencies in one graph. 


Libraries
-------------------------------------

asg.cliche-110413.jar          - command line interface
avro-1.7.7.jar:                - communication between computers
xuggle-xuggler-5.4             - decoding videos
java-rt-jar-stubs-1.5.0.jar    - file chooser + drawing frames and images



